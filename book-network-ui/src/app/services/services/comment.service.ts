/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addComment } from '../fn/comment/add-comment';
import { AddComment$Params } from '../fn/comment/add-comment';
import { Comment } from '../models/comment';
import { deleteComment } from '../fn/comment/delete-comment';
import { DeleteComment$Params } from '../fn/comment/delete-comment';
import { findAllCommentByPostId } from '../fn/comment/find-all-comment-by-post-id';
import { FindAllCommentByPostId$Params } from '../fn/comment/find-all-comment-by-post-id';

@Injectable({ providedIn: 'root' })
export class CommentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addComment()` */
  static readonly AddCommentPath = '/comments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addComment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addComment$Response(params: AddComment$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addComment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addComment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addComment(params: AddComment$Params, context?: HttpContext): Observable<number> {
    return this.addComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findAllCommentByPostId()` */
  static readonly FindAllCommentByPostIdPath = '/comments/{post-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCommentByPostId()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCommentByPostId$Response(params: FindAllCommentByPostId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Comment>>> {
    return findAllCommentByPostId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCommentByPostId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCommentByPostId(params: FindAllCommentByPostId$Params, context?: HttpContext): Observable<Array<Comment>> {
    return this.findAllCommentByPostId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Comment>>): Array<Comment> => r.body)
    );
  }

  /** Path part for operation `deleteComment()` */
  static readonly DeleteCommentPath = '/comments/{comment-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteComment()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteComment$Response(params: DeleteComment$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return deleteComment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteComment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteComment(params: DeleteComment$Params, context?: HttpContext): Observable<number> {
    return this.deleteComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
