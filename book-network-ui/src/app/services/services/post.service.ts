/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deletePost } from '../fn/post/delete-post';
import { DeletePost$Params } from '../fn/post/delete-post';
import { findAllByUser } from '../fn/post/find-all-by-user';
import { FindAllByUser$Params } from '../fn/post/find-all-by-user';
import { findAllPosts } from '../fn/post/find-all-posts';
import { FindAllPosts$Params } from '../fn/post/find-all-posts';
import { findPostById } from '../fn/post/find-post-by-id';
import { FindPostById$Params } from '../fn/post/find-post-by-id';
import { PageResponsePostResponse } from '../models/page-response-post-response';
import { PostResponse } from '../models/post-response';
import { savePost } from '../fn/post/save-post';
import { SavePost$Params } from '../fn/post/save-post';
import { uploadPost } from '../fn/post/upload-post';
import { UploadPost$Params } from '../fn/post/upload-post';

@Injectable({ providedIn: 'root' })
export class PostService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllPosts()` */
  static readonly FindAllPostsPath = '/posts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllPosts()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPosts$Response(params?: FindAllPosts$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePostResponse>> {
    return findAllPosts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllPosts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPosts(params?: FindAllPosts$Params, context?: HttpContext): Observable<PageResponsePostResponse> {
    return this.findAllPosts$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePostResponse>): PageResponsePostResponse => r.body)
    );
  }

  /** Path part for operation `savePost()` */
  static readonly SavePostPath = '/posts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `savePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePost$Response(params: SavePost$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return savePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `savePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePost(params: SavePost$Params, context?: HttpContext): Observable<number> {
    return this.savePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadPost()` */
  static readonly UploadPostPath = '/posts/file/{post-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPost$Response(params: UploadPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPost(params: UploadPost$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findPostById()` */
  static readonly FindPostByIdPath = '/posts/{post-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findPostById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPostById$Response(params: FindPostById$Params, context?: HttpContext): Observable<StrictHttpResponse<PostResponse>> {
    return findPostById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findPostById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPostById(params: FindPostById$Params, context?: HttpContext): Observable<PostResponse> {
    return this.findPostById$Response(params, context).pipe(
      map((r: StrictHttpResponse<PostResponse>): PostResponse => r.body)
    );
  }

  /** Path part for operation `deletePost()` */
  static readonly DeletePostPath = '/posts/{post-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePost$Response(params: DeletePost$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return deletePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePost(params: DeletePost$Params, context?: HttpContext): Observable<number> {
    return this.deletePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findAllByUser()` */
  static readonly FindAllByUserPath = '/posts/user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByUser$Response(params?: FindAllByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePostResponse>> {
    return findAllByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllByUser(params?: FindAllByUser$Params, context?: HttpContext): Observable<PageResponsePostResponse> {
    return this.findAllByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePostResponse>): PageResponsePostResponse => r.body)
    );
  }

}
