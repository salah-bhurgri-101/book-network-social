/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { FriendRequest } from '../models/friend-request';
import { getPendingRequests } from '../fn/friend/get-pending-requests';
import { GetPendingRequests$Params } from '../fn/friend/get-pending-requests';
import { removeFriend } from '../fn/friend/remove-friend';
import { RemoveFriend$Params } from '../fn/friend/remove-friend';
import { respondToRequest } from '../fn/friend/respond-to-request';
import { RespondToRequest$Params } from '../fn/friend/respond-to-request';
import { sendFriendRequest } from '../fn/friend/send-friend-request';
import { SendFriendRequest$Params } from '../fn/friend/send-friend-request';

@Injectable({ providedIn: 'root' })
export class FriendService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `respondToRequest()` */
  static readonly RespondToRequestPath = '/friends/requests/{id}/respond';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `respondToRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  respondToRequest$Response(params: RespondToRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return respondToRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `respondToRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  respondToRequest(params: RespondToRequest$Params, context?: HttpContext): Observable<string> {
    return this.respondToRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `sendFriendRequest()` */
  static readonly SendFriendRequestPath = '/friends/request';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendFriendRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendFriendRequest$Response(params: SendFriendRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return sendFriendRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendFriendRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendFriendRequest(params: SendFriendRequest$Params, context?: HttpContext): Observable<string> {
    return this.sendFriendRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getPendingRequests()` */
  static readonly GetPendingRequestsPath = '/friends/requests';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPendingRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingRequests$Response(params: GetPendingRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FriendRequest>>> {
    return getPendingRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPendingRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingRequests(params: GetPendingRequests$Params, context?: HttpContext): Observable<Array<FriendRequest>> {
    return this.getPendingRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FriendRequest>>): Array<FriendRequest> => r.body)
    );
  }

  /** Path part for operation `removeFriend()` */
  static readonly RemoveFriendPath = '/friends/remove';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeFriend()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeFriend$Response(params: RemoveFriend$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return removeFriend(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeFriend$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeFriend(params: RemoveFriend$Params, context?: HttpContext): Observable<string> {
    return this.removeFriend$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
